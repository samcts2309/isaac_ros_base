# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

ARG BASE_DIST
ARG CUDA_VERSION
ARG OPENCV_VERSION
ARG DOCKER_REPO
# Intra layer OpenCV
FROM ${DOCKER_REPO}:opencv-${OPENCV_VERSION} as opencv_builder

RUN cp /opt/opencv/build/OpenCV-*.tar.gz /OpenCV.tar.gz

FROM nvidia/cuda:${CUDA_VERSION}-devel-${BASE_DIST} as stage-1

# L4T variables
ARG JETPACK
ARG L4T
ARG L4T_MINOR_VERSION
# NVIDIA software
ARG TAO_TENSORRT_VERSION=8.4
ARG TRT_VERSION=8.5.2.2
ARG TRITON_VERSION

# Disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

# ROS2 Humble installation
# https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html

# Fundamentals
RUN apt-get update && apt-get install -y \
        locales \
        software-properties-common \
        build-essential \
        cmake \
        git \
        git-lfs \
        wget \
        unzip \
        curl \
        gnupg \
        # Python requirements
        python3 \
        python3-pip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Cmake Version
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
    apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" && \
    apt-get update && \
    apt-get install -y --no-install-recommends --only-upgrade \
            cmake=3.23.2-0kitware1ubuntu"$(lsb_release -rs)".1 cmake-data=3.23.2-0kitware1ubuntu"$(lsb_release -rs).1" \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# Set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Python dependencies
RUN python3 -m pip install -U \
        numpy

########### Sources and main Jetson repo ###################
FROM stage-1 as stage-2
COPY scripts/variables.sh /variables.sh
COPY scripts/install_nvidia_sources.sh install_nvidia_sources.sh
RUN TERM=xterm bash install_nvidia_sources.sh ${L4T} \
    && rm install_nvidia_sources.sh

# Where are located CUDA libraries for VPI in x86_64
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/compat"
# Where are located argus libraries for aarch64
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib/aarch64-linux-gnu/tegra:/usr/lib/aarch64-linux-gnu/tegra-egl"

########### VPI & TensorRT #################################
FROM stage-2 as stage-3
RUN apt-get update \
    && apt-get install -y libnvvpi2 vpi2-dev
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/nvidia/vpi2/lib64"

RUN v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
    apt-get update &&\
    apt-get install -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
        libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
        python3-libnvinfer=${v} libnvinfer-samples=${v} libnvinfer-bin=${v}
RUN v="${TRT_VERSION}-1+cuda${CUDA_VERSION%.*}" &&\
    apt-get install -y tensorrt=${v}

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda-11.4/targets/x86_64-linux/lib/stubs:/usr/local/cuda-11.4/targets/aarch64-linux/lib/stubs"

RUN rm -rf /var/lib/apt/lists/* \
    && apt-get clean

############ TAO converter #################################
FROM stage-3 as stage-4
COPY tao /opt/nvidia/tao
RUN TERM=xterm bash /opt/nvidia/tao/install_tao.sh ${TAO_TENSORRT_VERSION} \
    && rm /opt/nvidia/tao/install_tao.sh

ENV PATH="${PATH}:/opt/nvidia/tao"

############ Tritonserver ##################################
FROM stage-4 as stage-5
COPY scripts/install_tritonserver.sh install_tritonserver.sh
RUN TERM=xterm bash install_tritonserver.sh ${TRITON_VERSION} ${JETPACK} \
    && rm install_tritonserver.sh

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/tritonserver/lib"

############ OpenCV ########################################
FROM stage-5 as stage-6
# Load from OpenCV builder tar file
COPY --from=opencv_builder /OpenCV.tar.gz /opt/OpenCV.tar.gz
# Install OpenCV on system
COPY scripts/install_opencv.sh /opt/install_opencv.sh
RUN TERM=xterm bash /opt/install_opencv.sh ${OPENCV_VERSION} \
    && rm /opt/install_opencv.sh /opt/OpenCV.tar.gz

############ Patch #########################################
FROM stage-6 as stage-7
# Apply libcudacxx patch for fixing C++17 compilation errors in GXF on Cuda 11.4 aarch
COPY scripts/patch_libcudacxx.sh /opt/patch_libcudacxx.sh
COPY patches/libcudacxx_aarch64_cuda_11_4.diff /tmp/
RUN if [ "${CUDA_VERSION%.*}" = "11.4" ]; then \
        TERM=xterm bash /opt/patch_libcudacxx.sh; \ 
    fi
RUN rm /opt/patch_libcudacxx.sh /tmp/libcudacxx_aarch64_cuda_11_4.diff

############################################################

COPY scripts/entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]