ARG BASE_DIST
ARG CUDA_VERSION
ARG OPENCV_VERSION
ARG DOCKER_REPO
# Intra layer OpenCV
FROM ${DOCKER_REPO}:opencv-${OPENCV_VERSION} as opencv_builder

RUN cp /opt/opencv/build/OpenCV-*.tar.gz /OpenCV.tar.gz

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-runtime-${BASE_DIST}

# L4T variables
ARG JETPACK=5.0.2
ARG L4T=35.1
ARG L4T_MINOR_VERSION=1.0
# NVIDIA software
ARG TAO_TENSORRT_VERSION=8.4
ARG TRT_VERSION=8.5.2.2

# Disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

# ROS2 Humble installation
# https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html

# Fundamentals
RUN apt-get update && apt-get install -y \
        locales \
        software-properties-common \
        build-essential \
        cmake \
        git \
        git-lfs \
        wget \
        unzip \
        curl \
        gnupg \
        # Python requirements
        python3 \
        python3-pip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# Set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Python dependencies
RUN python3 -m pip install -U \
        numpy

########### Sources and main Jetson repo ###################

COPY scripts/variables.sh /variables.sh
COPY scripts/install_nvidia_sources.sh install_nvidia_sources.sh
RUN TERM=xterm bash install_nvidia_sources.sh ${L4T} \
    && rm install_nvidia_sources.sh

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/compat"

########### VPI & TensorRT #################################

RUN apt-get update \
    && apt-get install -y libnvvpi2 vpi2-dev
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/nvidia/vpi2/lib64"

ENV CUDNN_VERSION="$(apt policy libcudnn8 | grep Installed)"

RUN v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
    cudnn_version="${CUDNN_VERSION#*:}" &&\
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
    apt-get update &&\
    apt-get install -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
        libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
        python3-libnvinfer=${v} libnvinfer-samples=${v} libnvinfer-bin=${v} libcudnn8-dev=${cudnn_version}
RUN v="${TRT_VERSION}-1+cuda${CUDA_VERSION%.*}" &&\
    apt-get install -y tensorrt=${v}
RUN rm -rf /var/lib/apt/lists/* \
    && apt-get clean

############ OpenCV ########################################

# Load from OpenCV builder tar file
COPY --from=opencv_builder /OpenCV.tar.gz /opt/OpenCV.tar.gz
# Install OpenCV on system
COPY scripts/install_opencv.sh /opt/install_opencv.sh
RUN TERM=xterm bash /opt/install_opencv.sh ${OPENCV_VERSION} \
    && rm /opt/install_opencv.sh /opt/OpenCV.tar.gz

############################################################

COPY scripts/entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]